buildscript {
    dependencies {
        classpath 'com.h2database:h2:1.4.197'
    }
}

plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 5.6 OR HIGHER. Use plugin version 0.8.10 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.13'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    id 'com.google.cloud.tools.jib' version '2.6.0'
    id "org.flywaydb.flyway" version "7.3.2"
}

mainClassName = 'service.product.ProductServiceServer'

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/" }
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.33.1' // CURRENT_GRPC_VERSION
def protobufVersion = '3.12.0'
def protocVersion = protobufVersion
def flywayVersion = '7.3.2'

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.4.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.4.2")
    testImplementation("org.assertj:assertj-core:3.10.0")
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile "org.slf4j:slf4j-simple:1.7.9"
    compile "org.flywaydb:flyway-core:${flywayVersion}"
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.18'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

flyway {
    if(project.hasProperty('env') == false) {ext.env = 'dev'}
    apply from: "env/${env}.gradle"
    driver = "org.postgresql.Driver"
    url = flyway.url
    schemas = flyway.schemas
    user = flyway.user
    password = flyway.password
    sqlMigrationSeparator = "_"
    locations = flyway.locations
    placeholders = ["dir" : "${project.projectDir}".toString()]
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false
jib.to.image = 'image-built-with-jib'

task ProductServiceServer(type: CreateStartScripts) {
    mainClassName = 'service.product.ProductServiceServer'
    applicationName = 'product-service-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task ProductServiceClient(type: CreateStartScripts) {
    mainClassName = 'service.product.ProductServiceClient'
    applicationName = 'product-service-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {

    from(ProductServiceServer)
    from(ProductServiceClient)

    fileMode = 0755
}

jib {
    container.mainClass = "service.product.ProductServiceServer"
}
